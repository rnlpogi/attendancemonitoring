/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package attendancemonitoringsystem;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Time;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author ADMIN
 */
public class REPORT extends javax.swing.JFrame {
  Connection conn = null;   
PreparedStatement pst = null;
    PreparedStatement pst1 = null;
ResultSet rs = null;
   
    /**
     * Creates new form REPORT
     */
    public REPORT() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        total = new javax.swing.JTextField();
        monthchooser = new javax.swing.JComboBox();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));
        jPanel2.setForeground(new java.awt.Color(51, 204, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ATTENDANCE REPORT");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, 680, 69));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/attendancemonitoringsystem/icons/tboli.png"))); // NOI18N
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 10, 200, 170));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/attendancemonitoringsystem/icons/sc.png"))); // NOI18N
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 200, 170));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/attendancemonitoringsystem/icons/Lake_Holon_Shoreline.jpg"))); // NOI18N
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, -370, 990, -1));

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 880, 450));
        jPanel1.add(total, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 170, 70, -1));

        monthchooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT MONTH", "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER" }));
        monthchooser.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                monthchooserPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jPanel1.add(monthchooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 10, 100, 40));

        jButton4.setText("Back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 60, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       conn = DBConnection.getConnection();
   retrieve();
    }//GEN-LAST:event_formWindowOpened

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
      
    }//GEN-LAST:event_tableMouseClicked

    private void monthchooserPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_monthchooserPopupMenuWillBecomeInvisible
       if (monthchooser.getSelectedItem().equals("JANUARY")) {
            january();
        }else if (monthchooser.getSelectedItem().equals("FEBRUARY")) {
            february();
        }else if(monthchooser.getSelectedItem().equals("MARCH")){
            march();
        }
        else if(monthchooser.getSelectedItem().equals("APRIL")){
            april();
        }else if(monthchooser.getSelectedItem().equals("MAY")){
            may();
        }else if(monthchooser.getSelectedItem().equals("JUNE")){
            june();
        }else if(monthchooser.getSelectedItem().equals("JULY")){
            july();
        }else if(monthchooser.getSelectedItem().equals("AUGUST")){
            august();
        }else if(monthchooser.getSelectedItem().equals("SEPTEMBER")){
            september();
        }else if(monthchooser.getSelectedItem().equals("OCTOBER")){
            october();
        }else if(monthchooser.getSelectedItem().equals("NOVEMBER")){
            november();
        }else if(monthchooser.getSelectedItem().equals("DECEMBER")){
            December();
        }
        else{
            retrieve();
        }
    }//GEN-LAST:event_monthchooserPopupMenuWillBecomeInvisible

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        ADMINPAGE s= new  ADMINPAGE();
        s.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed
private double calculateTotalDaysRendered(LocalTime timeIn, LocalTime timeOut) {
    long hoursRendered = Duration.between(timeIn, timeOut).toHours();
 double a = 0.5;
    if (hoursRendered >= 8) {
        return 1;
    } else if (hoursRendered >= 4 && hoursRendered <= 7) {
        return a;
    }    else if (hoursRendered <= 4) {
        return 0;
    } else {
        return 0;
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new REPORT().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox monthchooser;
    private javax.swing.JTable table;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables
private void retrieve() {
    try {
        String sql = "SELECT attendance_id AS 'ID', employee_id AS 'Employee ID', fullname AS 'Full Name', contact AS 'Contact Number', position AS 'Position', department AS 'Department', Date AS 'Date', checkin AS 'Time in', checkout AS 'Time out' FROM attendance";
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Create a new DefaultTableModel with the required columns
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Employee ID");
        model.addColumn("Full Name");
        model.addColumn("Contact Number");
        model.addColumn("Position");
        model.addColumn("Department");
        model.addColumn("Date");
        model.addColumn("Time in");
        model.addColumn("Time out");
        model.addColumn("Total Hours");
        model.addColumn("Total Days");

        // Iterate through the result set and add data to the model
        while (rs.next()) {
            String attendanceId = rs.getString("ID");
            String employeeId = rs.getString("Employee ID");
            String fullName = rs.getString("Full Name");
            String contactNumber = rs.getString("Contact Number");
            String position = rs.getString("Position");
            String department = rs.getString("Department");
            LocalDate date = rs.getDate("Date").toLocalDate();
            LocalTime timeIn = rs.getTime("Time in").toLocalTime();
            LocalTime timeOut = rs.getTime("Time out").toLocalTime();
             
            // Calculate hours rendered
           double hoursRendered = Duration.between(timeIn, timeOut).toHours();
            
            
            // Calculate total days rendered
         double totalDaysRendered = calculateTotalDaysRendered(timeIn, timeOut);
            
            // Add the data to the model
            model.addRow(new Object[] { attendanceId, employeeId, fullName, contactNumber, position, department, date, timeIn, timeOut,hoursRendered, totalDaysRendered });
        }
        
        // Set the model to the table
        table.setModel(model);
        
        // Remove the attendance ID column from the table display
        table.removeColumn(table.getColumnModel().getColumn(0));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, e);
    }
}
 private void january(){
     try {
        String sql = "SELECT attendance_id AS 'ID', employee_id AS 'Employee ID', fullname AS 'Full Name', contact AS 'Contact Number', position AS 'Position', department AS 'Department', Date AS 'Date', checkin AS 'Time in', checkout AS 'Time out' FROM attendance WHERE MONTH(Date) = 1";
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Create a new DefaultTableModel with the required columns
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Employee ID");
        model.addColumn("Full Name");
        model.addColumn("Contact Number");
        model.addColumn("Position");
        model.addColumn("Department");
        model.addColumn("Date");
        model.addColumn("Time in");
        model.addColumn("Time out");
        model.addColumn("Total Hours");
        model.addColumn("Total Days");

        // Iterate through the result set and add data to the model
        while (rs.next()) {
            String attendanceId = rs.getString("ID");
            String employeeId = rs.getString("Employee ID");
            String fullName = rs.getString("Full Name");
            String contactNumber = rs.getString("Contact Number");
            String position = rs.getString("Position");
            String department = rs.getString("Department");
            LocalDate date = rs.getDate("Date").toLocalDate();
            LocalTime timeIn = rs.getTime("Time in").toLocalTime();
            LocalTime timeOut = rs.getTime("Time out").toLocalTime();
             
            // Calculate hours rendered
           double hoursRendered = Duration.between(timeIn, timeOut).toHours();
            
            
            // Calculate total days rendered
         double totalDaysRendered = calculateTotalDaysRendered(timeIn, timeOut);
            
            // Add the data to the model
            model.addRow(new Object[] { attendanceId, employeeId, fullName, contactNumber, position, department, date, timeIn, timeOut,hoursRendered, totalDaysRendered });
        }
        
        // Set the model to the table
        table.setModel(model);
        
        // Remove the attendance ID column from the table display
        table.removeColumn(table.getColumnModel().getColumn(0));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, e);
    }
   }
   private void february(){
       try {
        String sql = "SELECT attendance_id AS 'ID', employee_id AS 'Employee ID', fullname AS 'Full Name', contact AS 'Contact Number', position AS 'Position', department AS 'Department', Date AS 'Date', checkin AS 'Time in', checkout AS 'Time out' FROM attendance WHERE MONTH(Date) = 2";
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Create a new DefaultTableModel with the required columns
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Employee ID");
        model.addColumn("Full Name");
        model.addColumn("Contact Number");
        model.addColumn("Position");
        model.addColumn("Department");
        model.addColumn("Date");
        model.addColumn("Time in");
        model.addColumn("Time out");
        model.addColumn("Total Hours");
        model.addColumn("Total Days");

        // Iterate through the result set and add data to the model
        while (rs.next()) {
            String attendanceId = rs.getString("ID");
            String employeeId = rs.getString("Employee ID");
            String fullName = rs.getString("Full Name");
            String contactNumber = rs.getString("Contact Number");
            String position = rs.getString("Position");
            String department = rs.getString("Department");
            LocalDate date = rs.getDate("Date").toLocalDate();
            LocalTime timeIn = rs.getTime("Time in").toLocalTime();
            LocalTime timeOut = rs.getTime("Time out").toLocalTime();
             
            // Calculate hours rendered
           double hoursRendered = Duration.between(timeIn, timeOut).toHours();
            
            
            // Calculate total days rendered
         double totalDaysRendered = calculateTotalDaysRendered(timeIn, timeOut);
            
            // Add the data to the model
            model.addRow(new Object[] { attendanceId, employeeId, fullName, contactNumber, position, department, date, timeIn, timeOut,hoursRendered, totalDaysRendered });
        }
        
        // Set the model to the table
        table.setModel(model);
        
        // Remove the attendance ID column from the table display
        table.removeColumn(table.getColumnModel().getColumn(0));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, e);
    }
   }
    private void march(){
      try {
        String sql = "SELECT attendance_id AS 'ID', employee_id AS 'Employee ID', fullname AS 'Full Name', contact AS 'Contact Number', position AS 'Position', department AS 'Department', Date AS 'Date', checkin AS 'Time in', checkout AS 'Time out' FROM attendance WHERE MONTH(Date) = 3";
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Create a new DefaultTableModel with the required columns
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Employee ID");
        model.addColumn("Full Name");
        model.addColumn("Contact Number");
        model.addColumn("Position");
        model.addColumn("Department");
        model.addColumn("Date");
        model.addColumn("Time in");
        model.addColumn("Time out");
        model.addColumn("Total Hours");
        model.addColumn("Total Days");

        // Iterate through the result set and add data to the model
        while (rs.next()) {
            String attendanceId = rs.getString("ID");
            String employeeId = rs.getString("Employee ID");
            String fullName = rs.getString("Full Name");
            String contactNumber = rs.getString("Contact Number");
            String position = rs.getString("Position");
            String department = rs.getString("Department");
            LocalDate date = rs.getDate("Date").toLocalDate();
            LocalTime timeIn = rs.getTime("Time in").toLocalTime();
            LocalTime timeOut = rs.getTime("Time out").toLocalTime();
             
            // Calculate hours rendered
           double hoursRendered = Duration.between(timeIn, timeOut).toHours();
            
            
            // Calculate total days rendered
         double totalDaysRendered = calculateTotalDaysRendered(timeIn, timeOut);
            
            // Add the data to the model
            model.addRow(new Object[] { attendanceId, employeeId, fullName, contactNumber, position, department, date, timeIn, timeOut,hoursRendered, totalDaysRendered });
        }
        
        // Set the model to the table
        table.setModel(model);
        
        // Remove the attendance ID column from the table display
        table.removeColumn(table.getColumnModel().getColumn(0));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, e);
    }
   }
     private void april(){
     try {
        String sql = "SELECT attendance_id AS 'ID', employee_id AS 'Employee ID', fullname AS 'Full Name', contact AS 'Contact Number', position AS 'Position', department AS 'Department', Date AS 'Date', checkin AS 'Time in', checkout AS 'Time out' FROM attendance WHERE MONTH(Date) = 4";
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Create a new DefaultTableModel with the required columns
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Employee ID");
        model.addColumn("Full Name");
        model.addColumn("Contact Number");
        model.addColumn("Position");
        model.addColumn("Department");
        model.addColumn("Date");
        model.addColumn("Time in");
        model.addColumn("Time out");
        model.addColumn("Total Hours");
        model.addColumn("Total Days");

        // Iterate through the result set and add data to the model
        while (rs.next()) {
            String attendanceId = rs.getString("ID");
            String employeeId = rs.getString("Employee ID");
            String fullName = rs.getString("Full Name");
            String contactNumber = rs.getString("Contact Number");
            String position = rs.getString("Position");
            String department = rs.getString("Department");
            LocalDate date = rs.getDate("Date").toLocalDate();
            LocalTime timeIn = rs.getTime("Time in").toLocalTime();
            LocalTime timeOut = rs.getTime("Time out").toLocalTime();
             
            // Calculate hours rendered
           double hoursRendered = Duration.between(timeIn, timeOut).toHours();
            
            
            // Calculate total days rendered
         double totalDaysRendered = calculateTotalDaysRendered(timeIn, timeOut);
            
            // Add the data to the model
            model.addRow(new Object[] { attendanceId, employeeId, fullName, contactNumber, position, department, date, timeIn, timeOut,hoursRendered, totalDaysRendered });
        }
        
        // Set the model to the table
        table.setModel(model);
        
        // Remove the attendance ID column from the table display
        table.removeColumn(table.getColumnModel().getColumn(0));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, e);
    }
   }
      private void may(){
      try {
        String sql = "SELECT attendance_id AS 'ID', employee_id AS 'Employee ID', fullname AS 'Full Name', contact AS 'Contact Number', position AS 'Position', department AS 'Department', Date AS 'Date', checkin AS 'Time in', checkout AS 'Time out' FROM attendance WHERE MONTH(Date) = 5";
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Create a new DefaultTableModel with the required columns
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Employee ID");
        model.addColumn("Full Name");
        model.addColumn("Contact Number");
        model.addColumn("Position");
        model.addColumn("Department");
        model.addColumn("Date");
        model.addColumn("Time in");
        model.addColumn("Time out");
        model.addColumn("Total Hours");
        model.addColumn("Total Days");

        // Iterate through the result set and add data to the model
        while (rs.next()) {
            String attendanceId = rs.getString("ID");
            String employeeId = rs.getString("Employee ID");
            String fullName = rs.getString("Full Name");
            String contactNumber = rs.getString("Contact Number");
            String position = rs.getString("Position");
            String department = rs.getString("Department");
            LocalDate date = rs.getDate("Date").toLocalDate();
            LocalTime timeIn = rs.getTime("Time in").toLocalTime();
            LocalTime timeOut = rs.getTime("Time out").toLocalTime();
             
            // Calculate hours rendered
           double hoursRendered = Duration.between(timeIn, timeOut).toHours();
            
            
            // Calculate total days rendered
         double totalDaysRendered = calculateTotalDaysRendered(timeIn, timeOut);
            
            // Add the data to the model
            model.addRow(new Object[] { attendanceId, employeeId, fullName, contactNumber, position, department, date, timeIn, timeOut,hoursRendered, totalDaysRendered });
        }
        
        // Set the model to the table
        table.setModel(model);
        
        // Remove the attendance ID column from the table display
        table.removeColumn(table.getColumnModel().getColumn(0));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, e);
    }
   }
       private void june(){
       try {
        String sql = "SELECT attendance_id AS 'ID', employee_id AS 'Employee ID', fullname AS 'Full Name', contact AS 'Contact Number', position AS 'Position', department AS 'Department', Date AS 'Date', checkin AS 'Time in', checkout AS 'Time out' FROM attendance WHERE MONTH(Date) = 6";
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Create a new DefaultTableModel with the required columns
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Employee ID");
        model.addColumn("Full Name");
        model.addColumn("Contact Number");
        model.addColumn("Position");
        model.addColumn("Department");
        model.addColumn("Date");
        model.addColumn("Time in");
        model.addColumn("Time out");
        model.addColumn("Total Hours");
        model.addColumn("Total Days");

        // Iterate through the result set and add data to the model
        while (rs.next()) {
            String attendanceId = rs.getString("ID");
            String employeeId = rs.getString("Employee ID");
            String fullName = rs.getString("Full Name");
            String contactNumber = rs.getString("Contact Number");
            String position = rs.getString("Position");
            String department = rs.getString("Department");
            LocalDate date = rs.getDate("Date").toLocalDate();
            LocalTime timeIn = rs.getTime("Time in").toLocalTime();
            LocalTime timeOut = rs.getTime("Time out").toLocalTime();
             
            // Calculate hours rendered
           double hoursRendered = Duration.between(timeIn, timeOut).toHours();
            
            
            // Calculate total days rendered
         double totalDaysRendered = calculateTotalDaysRendered(timeIn, timeOut);
            
            // Add the data to the model
            model.addRow(new Object[] { attendanceId, employeeId, fullName, contactNumber, position, department, date, timeIn, timeOut,hoursRendered, totalDaysRendered });
        }
        
        // Set the model to the table
        table.setModel(model);
        
        // Remove the attendance ID column from the table display
        table.removeColumn(table.getColumnModel().getColumn(0));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, e);
    }
   }
        private void july(){
       try {
        String sql = "SELECT attendance_id AS 'ID', employee_id AS 'Employee ID', fullname AS 'Full Name', contact AS 'Contact Number', position AS 'Position', department AS 'Department', Date AS 'Date', checkin AS 'Time in', checkout AS 'Time out' FROM attendance WHERE MONTH(Date) = 7";
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Create a new DefaultTableModel with the required columns
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Employee ID");
        model.addColumn("Full Name");
        model.addColumn("Contact Number");
        model.addColumn("Position");
        model.addColumn("Department");
        model.addColumn("Date");
        model.addColumn("Time in");
        model.addColumn("Time out");
        model.addColumn("Total Hours");
        model.addColumn("Total Days");

        // Iterate through the result set and add data to the model
        while (rs.next()) {
            String attendanceId = rs.getString("ID");
            String employeeId = rs.getString("Employee ID");
            String fullName = rs.getString("Full Name");
            String contactNumber = rs.getString("Contact Number");
            String position = rs.getString("Position");
            String department = rs.getString("Department");
            LocalDate date = rs.getDate("Date").toLocalDate();
            LocalTime timeIn = rs.getTime("Time in").toLocalTime();
            LocalTime timeOut = rs.getTime("Time out").toLocalTime();
             
            // Calculate hours rendered
           double hoursRendered = Duration.between(timeIn, timeOut).toHours();
            
            
            // Calculate total days rendered
         double totalDaysRendered = calculateTotalDaysRendered(timeIn, timeOut);
            
            // Add the data to the model
            model.addRow(new Object[] { attendanceId, employeeId, fullName, contactNumber, position, department, date, timeIn, timeOut,hoursRendered, totalDaysRendered });
        }
        
        // Set the model to the table
        table.setModel(model);
        
        // Remove the attendance ID column from the table display
        table.removeColumn(table.getColumnModel().getColumn(0));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, e);
    }
   }
         private void august(){
      try {
        String sql = "SELECT attendance_id AS 'ID', employee_id AS 'Employee ID', fullname AS 'Full Name', contact AS 'Contact Number', position AS 'Position', department AS 'Department', Date AS 'Date', checkin AS 'Time in', checkout AS 'Time out' FROM attendance WHERE MONTH(Date) = 8";
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Create a new DefaultTableModel with the required columns
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Employee ID");
        model.addColumn("Full Name");
        model.addColumn("Contact Number");
        model.addColumn("Position");
        model.addColumn("Department");
        model.addColumn("Date");
        model.addColumn("Time in");
        model.addColumn("Time out");
        model.addColumn("Total Hours");
        model.addColumn("Total Days");

        // Iterate through the result set and add data to the model
        while (rs.next()) {
            String attendanceId = rs.getString("ID");
            String employeeId = rs.getString("Employee ID");
            String fullName = rs.getString("Full Name");
            String contactNumber = rs.getString("Contact Number");
            String position = rs.getString("Position");
            String department = rs.getString("Department");
            LocalDate date = rs.getDate("Date").toLocalDate();
            LocalTime timeIn = rs.getTime("Time in").toLocalTime();
            LocalTime timeOut = rs.getTime("Time out").toLocalTime();
             
            // Calculate hours rendered
           double hoursRendered = Duration.between(timeIn, timeOut).toHours();
            
            
            // Calculate total days rendered
         double totalDaysRendered = calculateTotalDaysRendered(timeIn, timeOut);
            
            // Add the data to the model
            model.addRow(new Object[] { attendanceId, employeeId, fullName, contactNumber, position, department, date, timeIn, timeOut,hoursRendered, totalDaysRendered });
        }
        
        // Set the model to the table
        table.setModel(model);
        
        // Remove the attendance ID column from the table display
        table.removeColumn(table.getColumnModel().getColumn(0));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, e);
    }
   }
          private void september(){
       try {
        String sql = "SELECT attendance_id AS 'ID', employee_id AS 'Employee ID', fullname AS 'Full Name', contact AS 'Contact Number', position AS 'Position', department AS 'Department', Date AS 'Date', checkin AS 'Time in', checkout AS 'Time out' FROM attendance WHERE MONTH(Date) = 9";
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Create a new DefaultTableModel with the required columns
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Employee ID");
        model.addColumn("Full Name");
        model.addColumn("Contact Number");
        model.addColumn("Position");
        model.addColumn("Department");
        model.addColumn("Date");
        model.addColumn("Time in");
        model.addColumn("Time out");
        model.addColumn("Total Hours");
        model.addColumn("Total Days");

        // Iterate through the result set and add data to the model
        while (rs.next()) {
            String attendanceId = rs.getString("ID");
            String employeeId = rs.getString("Employee ID");
            String fullName = rs.getString("Full Name");
            String contactNumber = rs.getString("Contact Number");
            String position = rs.getString("Position");
            String department = rs.getString("Department");
            LocalDate date = rs.getDate("Date").toLocalDate();
            LocalTime timeIn = rs.getTime("Time in").toLocalTime();
            LocalTime timeOut = rs.getTime("Time out").toLocalTime();
             
            // Calculate hours rendered
           double hoursRendered = Duration.between(timeIn, timeOut).toHours();
            
            
            // Calculate total days rendered
         double totalDaysRendered = calculateTotalDaysRendered(timeIn, timeOut);
            
            // Add the data to the model
            model.addRow(new Object[] { attendanceId, employeeId, fullName, contactNumber, position, department, date, timeIn, timeOut,hoursRendered, totalDaysRendered });
        }
        
        // Set the model to the table
        table.setModel(model);
        
        // Remove the attendance ID column from the table display
        table.removeColumn(table.getColumnModel().getColumn(0));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, e);
    }
   }
           private void october(){
      try {
        String sql = "SELECT attendance_id AS 'ID', employee_id AS 'Employee ID', fullname AS 'Full Name', contact AS 'Contact Number', position AS 'Position', department AS 'Department', Date AS 'Date', checkin AS 'Time in', checkout AS 'Time out' FROM attendance WHERE MONTH(Date) = 10";
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Create a new DefaultTableModel with the required columns
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Employee ID");
        model.addColumn("Full Name");
        model.addColumn("Contact Number");
        model.addColumn("Position");
        model.addColumn("Department");
        model.addColumn("Date");
        model.addColumn("Time in");
        model.addColumn("Time out");
        model.addColumn("Total Hours");
        model.addColumn("Total Days");

        // Iterate through the result set and add data to the model
        while (rs.next()) {
            String attendanceId = rs.getString("ID");
            String employeeId = rs.getString("Employee ID");
            String fullName = rs.getString("Full Name");
            String contactNumber = rs.getString("Contact Number");
            String position = rs.getString("Position");
            String department = rs.getString("Department");
            LocalDate date = rs.getDate("Date").toLocalDate();
            LocalTime timeIn = rs.getTime("Time in").toLocalTime();
            LocalTime timeOut = rs.getTime("Time out").toLocalTime();
             
            // Calculate hours rendered
           double hoursRendered = Duration.between(timeIn, timeOut).toHours();
            
            
            // Calculate total days rendered
         double totalDaysRendered = calculateTotalDaysRendered(timeIn, timeOut);
            
            // Add the data to the model
            model.addRow(new Object[] { attendanceId, employeeId, fullName, contactNumber, position, department, date, timeIn, timeOut,hoursRendered, totalDaysRendered });
        }
        
        // Set the model to the table
        table.setModel(model);
        
        // Remove the attendance ID column from the table display
        table.removeColumn(table.getColumnModel().getColumn(0));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, e);
    }
   }
            private void november(){
       try {
        String sql = "SELECT attendance_id AS 'ID', employee_id AS 'Employee ID', fullname AS 'Full Name', contact AS 'Contact Number', position AS 'Position', department AS 'Department', Date AS 'Date', checkin AS 'Time in', checkout AS 'Time out' FROM attendance WHERE MONTH(Date) = 11";
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Create a new DefaultTableModel with the required columns
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Employee ID");
        model.addColumn("Full Name");
        model.addColumn("Contact Number");
        model.addColumn("Position");
        model.addColumn("Department");
        model.addColumn("Date");
        model.addColumn("Time in");
        model.addColumn("Time out");
        model.addColumn("Total Hours");
        model.addColumn("Total Days");

        // Iterate through the result set and add data to the model
        while (rs.next()) {
            String attendanceId = rs.getString("ID");
            String employeeId = rs.getString("Employee ID");
            String fullName = rs.getString("Full Name");
            String contactNumber = rs.getString("Contact Number");
            String position = rs.getString("Position");
            String department = rs.getString("Department");
            LocalDate date = rs.getDate("Date").toLocalDate();
            LocalTime timeIn = rs.getTime("Time in").toLocalTime();
            LocalTime timeOut = rs.getTime("Time out").toLocalTime();
             
            // Calculate hours rendered
           double hoursRendered = Duration.between(timeIn, timeOut).toHours();
            
            
            // Calculate total days rendered
         double totalDaysRendered = calculateTotalDaysRendered(timeIn, timeOut);
            
            // Add the data to the model
            model.addRow(new Object[] { attendanceId, employeeId, fullName, contactNumber, position, department, date, timeIn, timeOut,hoursRendered, totalDaysRendered });
        }
        
        // Set the model to the table
        table.setModel(model);
        
        // Remove the attendance ID column from the table display
        table.removeColumn(table.getColumnModel().getColumn(0));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, e);
    }
   }
             private void December(){
      try {
        String sql = "SELECT attendance_id AS 'ID', employee_id AS 'Employee ID', fullname AS 'Full Name', contact AS 'Contact Number', position AS 'Position', department AS 'Department', Date AS 'Date', checkin AS 'Time in', checkout AS 'Time out' FROM attendance WHERE MONTH(Date) = 12";
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Create a new DefaultTableModel with the required columns
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Employee ID");
        model.addColumn("Full Name");
        model.addColumn("Contact Number");
        model.addColumn("Position");
        model.addColumn("Department");
        model.addColumn("Date");
        model.addColumn("Time in");
        model.addColumn("Time out");
        model.addColumn("Total Hours");
        model.addColumn("Total Days");

        // Iterate through the result set and add data to the model
        while (rs.next()) {
            String attendanceId = rs.getString("ID");
            String employeeId = rs.getString("Employee ID");
            String fullName = rs.getString("Full Name");
            String contactNumber = rs.getString("Contact Number");
            String position = rs.getString("Position");
            String department = rs.getString("Department");
            LocalDate date = rs.getDate("Date").toLocalDate();
            LocalTime timeIn = rs.getTime("Time in").toLocalTime();
            LocalTime timeOut = rs.getTime("Time out").toLocalTime();
             
            // Calculate hours rendered
           double hoursRendered = Duration.between(timeIn, timeOut).toHours();
            
            
            // Calculate total days rendered
         double totalDaysRendered = calculateTotalDaysRendered(timeIn, timeOut);
            
            // Add the data to the model
            model.addRow(new Object[] { attendanceId, employeeId, fullName, contactNumber, position, department, date, timeIn, timeOut,hoursRendered, totalDaysRendered });
        }
        
        // Set the model to the table
        table.setModel(model);
        
        // Remove the attendance ID column from the table display
        table.removeColumn(table.getColumnModel().getColumn(0));
    } catch (Exception e) {
        JOptionPane.showMessageDialog(rootPane, e);
    }
   }}



